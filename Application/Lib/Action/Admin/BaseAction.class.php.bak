<?php
/**
 * 基本控制器
 */
class BaseAction extends Action {
    //分页每页数据条数
    protected $pageSize = 10;
    /**
     * 初始化
     */
    function _initialize(){
        //判断管理员是否登录
        //$this->checkLogin(); 
        if(!isset($_SESSION['UID']) && $_SESSION['UID'] < 1 ){
            $this->redirect('Public/login');
        }
    }
    /**
     * 判断登录
     */
    protected function checkLogin(){
        if( authcheck(GROUP_NAME . '/' . MODULE_NAME.'/'.ACTION_NAME,$_SESSION['UID']) ){
            //$this->redirect('Index/index');
        }else{
            $this->redirect('Public/login');
        }
    }
    /**
     * 默认页
     */
    public function index(){
        $this->pageSize = C('PAGE_SIZE');
        $map = $this->_search();
        if(method_exists($this, '_filter')){
            $this->_filter($map);
        }
        $tbName = $this->getActionName();
        $model = D($tbName);
        if(!empty($model)){
            //$this->_getList($model,$map);
            //获取全部数据 前端Dashboard会进行各种处理 分页 查询 排序 
            $list = $model->where($map)->order($model->getPk().' desc')->select();
            //var_dump($list);
            $this->assign('list',$list);
        }
        $this->display();
    }
    /**
     * 处理查询条件
     * @param string tbName 数据表名称
     * @return array 查询条件
     */
    protected function _search( $tbName = '' ){
        if(empty($tbName)){
            $tbName = $this->getActionName();
        }
        $model = D($tbName);
        $map = array();
        foreach ($model->getDbFields() as $key => $value) {
            if(isset($_REQUEST[$value]) && ('' != $_REQUEST[$value]) ){
                $map[$value] = $_REQUEST[$value];
            }
        }
        return $map;
    }
    /**
     * 查询分页数据
     * @param Model $model 数据对象
     * @param array $map 查询条件
     * @param string $orderBy 排序字段条件 
     * @param boolean $asc=true 默认正序
     * @request int page 页码
     * @request string order 需要排序的字段
     * @request string sort 排序方式
     * @request int size 每页显示的数据条数
     * /App/Job/index/page/2/sort/desc/order/job
     */
    // protected function _getList($model, $map, $orderBy = '', $asc = true){
    //     $currentPage  = I('page',1);
    //     //排序字段
    //     if( isset($_REQUEST['order']) ){
    //         $order = $_REQUEST['order'];
    //     }else{
    //         $order = !empty($orderBy) ? $orderBy : $model->getPk();
    //     }
    //     //排序方式
    //     if( isset($_REQUEST['sort']) ){
    //         $sort = $_REQUEST['sort'];
    //     }else{
    //         $sort = $asc ? 'asc' : 'desc';
    //     }
    //     //每页条数
    //     if( isset($_REQUEST['size']) ){
    //         $this->pageSize = $_REQUEST['size'];
    //     }
    //     //分页
    //     import("ORG.Util.Page");
    //     $count      = $model->where($map)->count();         // 查询满足要求的总记录数
    //     if($count > 0){
    //             $Page       = new Page($count,$this->pageSize);      // 实例化分页类 传入总记录数和每页显示的记录数
    //             $show       = $Page->show();                                    // 分页显示输出

    //             $list = $model->where($map)->order('`'.$order.'`  '.$sort.'')->page($currentPage.','.$this->pageSize)->select();
    //             //$list['debug'] = $model->getLastSql(); 
    //              //分页跳转的时候保证查询条件
    //              foreach($map as $key=>$val) {
    //                 $Page->parameter   .=   "$key=".urlencode($val).'&';
    //              } 
    //              //var_dump($list);
    //              $this->assign('list',$list);
    //              //$this->appReturn(2000,'数据查询成功',$list);
    //     }
        //$this->appReturn(2001,'数据库没有查询到数据');
        //return;
    // }
    /**
     * 添加页面
     */
    public function add(){
        $this->display();
    }
    /**
     * 插入表数据
     */
    public function insert(){
        $tbName = $this->getActionName();
        $model = D($tbName);
        if(false === $model->create()){
            $this->error('表单提交数据错误');
            // $this->appReturn(-6000,'表单提交数据错误');
        }
        $model->createtime = time();
        $list = $model->add();
        if(false !== $list){
            $this->redirect("$tbName/index");
            // $this->appReturn(2000,'数据插入成功');
        }else{
            $this->error('数据插入失败');
            // $this->appReturn(-6002,'数据插入失败');
        }
    }
    /**
     * 读取页面
     */
    public function show(){
        $tbName = $this->getActionName();
        $model = D($tbName);
        $where[$model->getPk()] = array('eq',$_REQUEST[$model->getPk()]);
        $list = $model->where($where)->find();
        // print_r($model->getLastSql());
        // var_dump($list);
        if($list){
            $this->assign('list',$list);
            // $this->appReturn(2000,'获取编辑数据成功');
        }else{
            $this->error('获取数据失败');
            // $this->appReturn(-6002,'获取编辑数据失败');
        }
        $this->display();
    }
    /**
     * 编辑页面
     */
    public function edit(){
        $tbName = $this->getActionName();
        $model = D($tbName);
        $where[$model->getPk()] = array('eq',$_REQUEST[$model->getPk()]);
        $list = $model->where($where)->find();
        // if(0 == count($list)){
        //     $this->appReturn(2001,'数据库没有查询到数据');
        // }

        if($list){
            $list['desc'] = unserialize($list['desc']);
            $this->assign('list',$list);
            // $this->appReturn(2000,'获取编辑数据成功');
        }else{
            $this->error('获取编辑数据失败');
            // $this->appReturn(-6002,'获取编辑数据失败');
        }
        $this->display();
    }
    /**
     * 更新表数据
     */
    public function update(){
        $tbName = $this->getActionName();
        $model = D($tbName);
        if(false === $model->create()){
            $this->error('表单提交数据错误');
            // $this->appReturn(-6000,'表单提交数据错误');
        }
        $model->updatetime = time();
        // var_dump($model);exit;
        $list = $model->save();
        if(false !== $list){
            $this->redirect("$tbName/index");
            // $this->appReturn(2000,'数据编辑成功');
        }else{
            $this->error('数据编辑失败');
            // $this->appReturn(-6002,'数据编辑失败');
        }
    }
    /**
     * 直接删除表数据
     */
    public function delete(){
        $tbName = $this->getActionName();
        $model = D($tbName);
        if(!empty($model)){
            $pk = $model->getPk();
            $id = $_REQUEST[$pk];
            if( isset($id) ){
                $where[$pk] =  array('in',explode(',', $id));
                $list = $model->where($where)->delete();
				$debug = $model->getLastSql();
                if(false !== $list){
                    $this->appReturn(2000,'数据删除成功');
                }else{
                    $this->appReturn(-6002,'数据删除失败',$debug);
                }
            }else{
                $this->appReturn(-6001,'非法操作');
            }
        }// end if(!empty($model))
    }
    /**
     * 虚拟删除表数据
     */
    public function virtualdelete(){
        $tbName = $this->getActionName();
        $model = D($tbName);
        if(!empty($model)){
            $pk = $model->getPk();
            $id = $_REQUEST[$pk];
            if( isset($id) ){
                $data['id'] =  array('in',explode(',', $id));
                $data['status'] = -1;
                $data['updatetime'] = time();
                $list = $model->save($data);
                if(false !== $list){
                    // $this->redirect("$tbName/index");
                    $this->appReturn(2000,'数据删除成功');
                }else{
                    // $this->error('数据删除失败');
                    $this->appReturn(-6002,'数据删除失败');
                }
            }else{
                // $this->error('非法操作');
                $this->appReturn(-6001,'非法操作');
            }
        }// end if(!empty($model))
    }
    /**
     * 虚拟启用表数据
     */
    public function virtualstart(){
        $tbName = $this->getActionName();
        $model = D($tbName);
        if(!empty($model)){
            $pk = $model->getPk();
            $id = $_REQUEST[$pk];
            if( isset($id) ){
                $data['id'] =  array('in',explode(',', $id));
                $data['status'] = 1;
                $data['updatetime'] = time();
                $list = $model->save($data);
                if(false !== $list){
                    // $this->redirect("$tbName/index");
                    $this->appReturn(2000,'数据删除成功');
                }else{
                    // $this->error('数据删除失败');
                    $this->appReturn(-6002,'数据删除失败');
                }
            }else{
                // $this->error('非法操作');
                $this->appReturn(-6001,'非法操作');
            }
        }// end if(!empty($model))
    }
    /**
     * 状态改变
     */
    public function statuschange(){
        $id = I('id',0,'intval');
        $status = I('status',0,'intval');
        $tbName = $this->getActionName();
        $model = D($tbName);
        if(!empty($model)){ 
                $data['id'] =  array('eq',$id);
                // $data['status'] = 1;
                // if($status != 0){
                $data['status'] = $status;
                // }
                $data['updatetime'] = time();
                $list = $model->save($data);
                $debug = $model->getLastSql();
                $this->ajaxReturn(array('code'=>2000,'msg'=>'ok','debug'=>$debug));
                if(false !== $list){
                    $this->appReturn(2000,'数据删除成功'.$debug);
                }else{
                    $this->appReturn(-6002,'数据删除失败'.$debug);
                } 
        }// end if(!empty($model))
    }
    /**
     * 字段改变值
     */
    public function fieldchange(){
        $id = I('id',0,'intval');
        $field = I('field');
        $value = I('value');
        $tbName = $this->getActionName();
        $model = D($tbName);
        if(!empty($model)){ 
                $data['id'] =  array('eq',$id); 
                if(!empty($field)){
                    $data[$field] = $value;
                }
                $data['updatetime'] = time();
                $list = $model->save($data);
                if(false !== $list){
                    $this->appReturn(2000,'数据删除成功');
                }else{
                    $this->appReturn(-6002,'数据删除失败');
                } 
        }// end if(!empty($model))
    }
   

    protected function _empty(){
    	echo '非法请求';
    }

    /**
     * ajaxReturn()
     * @param int code 错误代码
     * @param string msg 错误消息字符串
     * @param array data 返回的数据数组
     */
    protected function appReturn($code=0,$msg='',$data=array()){
    	$arr = array(
    		'data'=>$data,
            'msg'=>$msg,
            'code'=>$code
    	);
    	$this->ajaxReturn($arr);
    }

   /**
     * 图片上传 Base64 方式
   */
    public function uploadImage(){
        $data = I("data");
        $path = I("path");
        if(empty($path)){
            $path=C('UPLOAD_PATH');
        }
        if (!is_readable($path)){ 
             is_file($path) or mkdir($path,0777);  
        }
        $file=$path.time().'.png';
        $base64=base64_decode($data);
        file_put_contents($file, $base64);
        $this->ajaxReturn(array("code"=>2000,"msg"=>"图标上传成功!","data"=>'/'.$file));
    }
    public function delUploadImage(){
        $file = I("imgs");  
        if(file_exists($file)){ 
            if (unlink($file)){
                $this->ajaxReturn(array("code"=>2000,"msg"=>"图片删除成功!",'file'=>$file));
            }else{
                $this->ajaxReturn(array("code"=>-6001,"msg"=>"图片删除失败!",'file'=>$file));
            }
        }else{
            $this->ajaxReturn(array("code"=>-6001,"msg"=>"图片不存在!",'file'=>$file));
        } 
    }

    /**
     * 上传文件
     */
    public function uploadFile(){
        import('ORG.Net.UploadFile');
        $upload = new UploadFile();
        // 设置附件上传大小
        $upload->maxSize  = 3145728 ;
        // 设置附件上传目录
        $upload->savePath = C('UPLOAD_PATH'); 
        if (!file_exists($upload->savePath)){ 
            mkdir ($upload->savePath,0777);
        }
         if(!$upload->upload()) {                           
            // 上传错误提示错误信息
            $this->appReturn(-3000,'上传错误'.$upload->getErrorMsg());
         }else{
            // 上传成功 获取上传文件信息
            $data = $upload->getUploadFileInfo();
            $this->appReturn(2000,'上传成功',$data);
        }
    }
 
    /**
     * ajax获取省份的城市
     */
    public function getProvinceToCity(){
        $pid = I('province');
        $city = getProvinceAllCity($pid);
        $this->appReturn(2000,'成功',$city);
    }
    /**
     * ajax获取城市的区县
     */
    public function getCityToArea(){
        $cid = I('city');
        $area = getCityAllArea($cid);
        $this->appReturn(2000,'成功',$area);
    }
    /**
     * ajax获取类型名称
     * 商品分类联动
     */
    public function getSubTypeName(){
        $pid = I('pid',0,'intval');
        if($pid < 1){
            $this->appReturn(-6001,'请求参数错误');
        }
        $model = M('Type');
        $map['parentId'] = array('eq',$pid);
        $res = $model->where($map)->select();
        $this->appReturn(2000,'成功',$res);
    }
    /**
     * ajax获取品牌名称
     * 商品联动
     */
    public function getBrandName(){
        $typeid = I('typeid',0,'intval');
        if($typeid < 1){
            $this->appReturn(-6001,'请求参数错误');
        }
        $model = M('Goodsbrand');
        $map['typeId'] = array('eq',$typeid);
        $res = $model->where($map)->select();
        // if(empty($res)){
        //     $res = $model->select();
        // }
        $this->appReturn(2000,'成功',$res);
    }
    /**
     * ajax获取颜色名称
     * 商品联动
     */
    public function getColorName(){
        $typeid = I('typeid',0,'intval');
        if($typeid < 1){
            $this->appReturn(-6001,'请求参数错误');
        }
        $model = M('Goodscolor');
        $map['typeId'] = array('eq',$typeid);
        $map['status'] = array('eq',1);
        $res = $model->where($map)->select();
        // if(empty($res)){
        //     $res = $model->select();
        // }
        $this->appReturn(2000,'成功',$res);
    }
    /**
     * ajax获取尺寸名称
     * 商品联动
     */
    public function getSizeName(){
        $typeid = I('typeid',0,'intval');
        if($typeid < 1){
            $this->appReturn(-6001,'请求参数错误');
        }
        $model = M('Goodssize');
        $map['typeId'] = array('eq',$typeid);
        $map['status'] = array('eq',1);
        $res = $model->where($map)->select();
        // if(empty($res)){
        //     $res = $model->select();
        // }
        $this->appReturn(2000,'成功',$res);
    }
    /**
     * ajax获取商品名称
     * 商品联动
     */
    public function getGoodsName(){
        $typeid = I('typeid',0,'intval');
        if($typeid < 1){
            $this->appReturn(-6001,'请求参数错误');
        }
        $model = M('Goods');
        $map['typeId'] = array('eq',$typeid);
        $map['status'] = array('eq',1);
        $res = $model->where($map)->select();
        // if(empty($res)){
        //     $res = $model->select();
        // }
        $this->appReturn(2000,'成功',$res);
    }
    /**
     * 生成商品备案XML文件
     * @param object $goods
     * @param int modifyMark 操作 1增 2改 3删
     */
    public function createGoodsXml($goods,$modifyMark){
        //备案XML文件
            $mGoodsHead = M('ReportGoodshead');
            $dGoodsHead = $mGoodsHead->where('id=1')->find();
            $xmlStr = '<?xml version="1.0" encoding="UTF-8"?>'.
                        '<Goods xmlns="http://www.chinaport.gov.cn/ecss">'.
                            '<GoodsHead>'.
                                '<customsCode>'.$dGoodsHead['customsCode'].'</customsCode>'.
                                '<cbeCode>'.$dGoodsHead['cbeCode'].'</cbeCode>'.
                                '<cbeName>'.$dGoodsHead['cbeName'].'</cbeName>'.
                                '<applyCode>'.$dGoodsHead['applyCode'].'</applyCode>'.
                                '<applyName>'.$dGoodsHead['applyName'].'</applyName>'.
                                '<agentCode>'.$dGoodsHead['agentCode'].'</agentCode>'.
                                '<agentName>'.$dGoodsHead['agentName'].'</agentName>'.
                                '<accessType>'.$dGoodsHead['accessType'].'</accessType>'.
                                '<ieType>'.$dGoodsHead['ieType'].'</ieType>'.
                                '<appUid>'.$dGoodsHead['appUid'].'</appUid>'.
                                '<appUname>'.$dGoodsHead['appUname'].'</appUname>'.
                            '</GoodsHead>'.
                            '<GoodsList>'.
                                '<goodsNo>'.$goods['goodsNum'].'</goodsNo>'.
                                '<shelfGoodsName>'.$goods['name'].'</shelfGoodsName>'.
                                '<describe>'.$goods['name'].'</describe>'.
                                '<codeTs></codeTs>'.
                                '<goodsName>'.$goods['name'].'</goodsName>'.
                                '<goodsModel>'.getField2($goods['unit'],'UNIT_NAME','Unit',true,'UNIT_CODE').'|'.$goods['weight'].'</goodsModel>'.
                                '<unit>'.$goods['unit'].'</unit>'.
                                '<unit1></unit1>'.
                                '<unit2></unit2>'.
                                '<country>'.$goods['country'].'</country>'.
                                '<price>'.$goods['recordPrice'].'</price>'.
                                '<currency>'.$goods['curr'].'</currency>'.
                                '<image></image>'.
                                '<barCode></barCode>'.
                                '<taxCode>1101</taxCode>'.
                                '<ecpCode>'.$dGoodsHead['ecpCode'].'</ecpCode>'.
                                '<ecpName>'.$dGoodsHead['ecpName'].'</ecpName>'.
                                '<isTax></isTax>'.
                                '<superviseId></superviseId>'.
                                '<itemNo></itemNo>'.
                                '<limitationGoodsCode></limitationGoodsCode>'.
                                '<batchNumbers></batchNumbers>'.
                                '<brand>'.$dGoodsHead['brand'].'</brand>'.
                                '<giftFlag>'.$dGoodsHead['giftFlag'].'</giftFlag>'.
                                '<modifyMark>'.$modifyMark.'</modifyMark>'.
                                '<note></note>'.
                                '<appTime>'.date('YmdHms').'</appTime>'.
                                '<appStatus>2</appStatus>'.
                                '<appUid>'.$dGoodsHead['appUid'].'</appUid>'.
                                '<appUname>'.$dGoodsHead['appUname'].'</appUname>'.
                            '</GoodsList>'.
                            '</Goods>';
            //$path = './Public/Xml/'.date('Ymd');
            $path = './Public/Xml/';
           //$path = '/usr/local/Data/send/ReceiveErp/'.date('Ymd'); 
            if(!file_exists($path)){  
                mkdir($path,0777);  
            }    
            $file = $path.'/Goods'.$goods['goodsNum'].'.xml'; 
            file_put_contents($file,$xmlStr);
    }
     /**
     * 生成订单备案XML文件
     * @param object $order
     * @param int modifyMark 操作 1增 2改 3删
     * 生成所有下单的订单 XML文件 http://localhost/Admin/Goods/createOrderXml
     */
    //public function createOrderXml($order,$modifyMark){
    public function createOrderXml(){
        $modifyMark = 1;
        //获取订单
        $mOrder = M('Order');
        $mapOrder['status'] = array('eq',1);
        $order = $mOrder->where($mapOrder)->select();
        //获取订单收货人地址
        $mAddress = M('Address');
        //获取订单商品
        $mOrderinfo = M('Orderinfo');
        foreach ($order as $key => $value) {
            //地址
            $mapAddress['id'] = array('eq',$value['addressId']);
            $addr = $mAddress->where($mapAddress)->find();
            $order[$key]['name'] = $addr['name'];
            $order[$key]['specificAddr'] = $addr['specificAddr'];
            $order[$key]['addr'] = $addr['addr'];
            $order[$key]['tel'] = $addr['tel'];
            //商品 
            $mapInfo['m_orderinfo.orderId'] = array('eq',$value['id']);
            $goods = $mOrderinfo->where($mapInfo)->join('m_goods ON m_goods.id=m_orderinfo.goodsId')->field('m_goods.name,m_goods.goodsNum as goodsNo,m_goods.unit,m_goods.country,m_goods.recordPrice,m_goods.curr,m_goods.giftFlag,m_goods.brandId,m_goods.weight,m_goods.stock,m_orderinfo.*')->select();
            // var_dump($goods);
            $order[$key]['goodsArr'] = $goods;
        } 

        //备案XML文件
            $mGoodsHead = M('ReportGoodshead');
            $dGoodsHead = $mGoodsHead->where('id=1')->find();
        foreach ($order as $key => $value) {
            $xmlHead = '<?xml version="1.0" encoding="UTF-8"?>'.
                '<Order xmlns="http://www.chinaport.gov.cn/ecss">'.
                    '<OrderHead>'.
                        '<cbeCode>'.$dGoodsHead['cbeCode'].'</cbeCode>'.
                        '<cbeName>'.$dGoodsHead['cbeName'].'</cbeName>'.
                        '<ecpCode>'.$dGoodsHead['ecpCode'].'</ecpCode>'.
                        '<ecpName>'.$dGoodsHead['ecpName'].'</ecpName>'.
                        '<orderNo>'.$value['orderNum'].'</orderNo> '.         
                        '<charge>'.$value['money'].'</charge>'.
                        '<goodsValue>'.$value['payment'].'</goodsValue>'.
                        '<freight></freight>'.
                        '<other></other>'.
                        '<currency>142</currency>'.
                        '<tax></tax>'.
                        '<customer></customer>'.
                        '<shipper></shipper>'.
                        '<shipperAddress></shipperAddress>'.
                        '<shipperTelephone></shipperTelephone>'.
                        '<shipperCountry></shipperCountry>'.
                        '<consignee>'.$value['name'].'</consignee>'.
                        '<consigneeAddress>'.$value['specificAddr'].$value['addr'].'</consigneeAddress>'.
                        '<consigneeTelephone>'.$value['tel'].'</consigneeTelephone>'.
                        '<consigneeCountry></consigneeCountry>'.
                        '<idType>1</idType>'.
                        '<customerId></customerId>'.
                        '<accessType>2</accessType>'.
                        '<ieType>I</ieType>'.
                        '<batchNumbers></batchNumbers>'.
                        '<totalLogisticsNo></totalLogisticsNo>'.
                        '<tradeCountry></tradeCountry>'.
                        '<agentCode></agentCode>'.
                        '<agentName></agentName>'.
                        '<wrapType></wrapType>'.
                        '<modifyMark>'.$modifyMark.'</modifyMark>'.
                        '<note></note>'.
                        '<appTime>'.date('YmdHms').'</appTime>'.
                        '<appStatus>2</appStatus>'.
                        '<appUid>'.$dGoodsHead['appUid'].'</appUid>'.
                        '<appUname>'.$dGoodsHead['appUname'].'</appUname>'.
                    '</OrderHead>'; 

                    $xmlBox = '';
            foreach ($value['goodsArr'] as $k => $v) {
            $xmlBox .= '<OrderList>'.
                        '<itemNo></itemNo>'.
                        '<goodsNo>'.$v['goodsNo'].'</goodsNo>'.
                        '<shelfGoodsName>'.$v['name'].'</shelfGoodsName>'.
                        '<describe></describe>'.
                        '<codeTs></codeTs>'.
                        '<goodsName></goodsName>'.
                        '<goodsModel></goodsModel>'.
                        '<taxCode></taxCode>'.
                        '<price></price>'.
                        '<currency>142</currency>'.
                        '<quantity>'.$v['goodsNum'].'</quantity>'.
                        '<priceTotal>'.$value['payment'].'</priceTotal>'.
                        '<unit>'.$v['unit'].'</unit>'.
                        '<discount></discount>'.
                        '<giftFlag></giftFlag>'.
                        '<country></country>'.
                        '<purposeCode></purposeCode>'.
                        '<wasteMaterials>1</wasteMaterials>'.
                        '<wrapType></wrapType>'.
                        '<packNum></packNum>'.
                        '<barCode></barCode>'.
                        '<brand>'.getBrandName($v['brandId']).'</brand>'.
                        '<note></note>'.
                    '</OrderList>'; 
                    }        

            $xmlFooter='<OrderPaymentLogistics>'.
                        '<paymentCode></paymentCode>'.
                        '<paymentName></paymentName>'.
                        '<paymentType></paymentType>'.
                        '<paymentNo></paymentNo>'.
                        '<logisticsCode></logisticsCode>'.
                        '<logisticsName></logisticsName>'.
                        '<logisticsNo></logisticsNo>'.
                        '<trackNo></trackNo>'.
                    '</OrderPaymentLogistics>'.
                '</Order>';
            $xmlStr = $xmlHead.$xmlBox.$xmlFooter;
            // print_r($xmlStr);

            //$path = './Public/Xml/'.date('Ymd');
            $path = './Public/Xml/';
           //$path = '/usr/local/Data/send/ReceiveErp/'.date('Ymd');
	    if(!file_exists($path)){  
                mkdir($path,0777);  
            }
            $file = $path.'/Order'.$goods['orderNo'].'.xml'; 
            file_put_contents($file,$xmlStr);  
        }//foreach
    }

    public function test(){
        $a = getImgUrl("/Public/Uploads/1.jpg",1);
        var_dump($a);
    }

}
?>
